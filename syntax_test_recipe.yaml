\\ SYNTAX TEST "Packages/User/bitbake/Bitbake.sublime-syntax"

# remove tasks that modify the source tree in case externalsrc is inherited
SRCTREECOVEREDTASKS += "do_kernel_configme do_validate_branches do_kernel_configcheck do_kernel_checkout do_fetch do_unpack do_patch"
PATCH_GIT_USER_EMAIL ?= "kernel-yocto@oe"
PATCH_GIT_USER_NAME ?= "OpenEmbedded"

python __anonymous () {
    def do_a_thing():
        pass
}

RDEPENDS_${PN} += "thing"

\\ ^ support.constant.bitbake


inherit useradd pkgconfig autotools perlnative update-rc.d update-alternatives qemu systemd ptest gettext bash-completion

SRC_URI += " \
           file://touchscreen.rules \
           file://00-create-volatile.conf \
           file://init \
           file://run-ptest \
           file://0003-define-exp10-if-missing.patch \
           file://0004-Use-getenv-when-secure-versions-are-not-available.patch \
           file://0005-binfmt-Don-t-install-dependency-links-at-install-tim.patch \
           file://0006-configure-Check-for-additional-features-that-uclibc-.patch \
           file://0007-use-lnr-wrapper-instead-of-looking-for-relative-opti.patch \
           file://0008-nspawn-Use-execvpe-only-when-libc-supports-it.patch \
           file://0009-util-bypass-unimplemented-_SC_PHYS_PAGES-system-conf.patch \
           file://0010-implment-systemd-sysv-install-for-OE.patch \
           file://0011-nss-mymachines-Build-conditionally-when-HAVE_MYHOSTN.patch \
           file://0012-rules-whitelist-hd-devices.patch \
           file://0013-sysv-generator-add-support-for-executing-scripts-und.patch \
           file://0014-Make-root-s-home-directory-configurable.patch \
           file://0015-systemd-user-avoid-using-system-auth.patch \
           file://0016-Revert-rules-remove-firmware-loading-rules.patch \
           file://0017-Revert-udev-remove-userspace-firmware-loading-suppor.patch \
           file://0018-make-test-dir-configurable.patch \
           file://0019-remove-duplicate-include-uchar.h.patch \
           file://0020-check-for-uchar.h-in-configure.patch \
           file://0021-include-missing.h-for-getting-secure_getenv-definiti.patch \
           file://0022-socket-util-don-t-fail-if-libc-doesn-t-support-IDN.patch \
           file://udev-re-enable-mount-propagation-for-udevd.patch \
           file://CVE-2016-7795.patch \
"

SRC_URI_append_libc-uclibc = "\
           file://0002-units-Prefer-getty-to-agetty-in-console-setup-system.patch \
           "

CACHED_CONFIGUREVARS += "ac_cv_path_QUOTACHECK=${sbindir}/quotacheck"
CACHED_CONFIGUREVARS += "ac_cv_path_QUOTAON=${sbindir}/quotaon"
CACHED_CONFIGUREVARS += "ac_cv_path_SULOGIN=${base_sbindir}/sulogin"

# Helper variables to clarify locations.  This mirrors the logic in systemd's
# build system.
rootprefix ?= "${base_prefix}"
rootlibdir ?= "${base_libdir}"
rootlibexecdir = "${rootprefix}/lib"


PACKAGECONFIG[hostnamed] = "--enable-hostnamed,--disable-hostnamed"
PACKAGECONFIG[myhostname] = "--enable-myhostname,--disable-myhostname"
PACKAGECONFIG[rfkill] = "--enable-rfkill,--disable-rfkill"
PACKAGECONFIG[hibernate] = "--enable-hibernate,--disable-hibernate"
PACKAGECONFIG[timedated] = "--enable-timedated,--disable-timedated"

# returns local (absolute) path names for all valid patches in the
# src_uri
def find_patches(d):
    patches = src_patches(d)
    patch_list=[]
    for p in patches:
        _, _, local, _, _, _ = bb.fetch.decodeurl(p)
        patch_list.append(local)

    return patch_list

do_kernel_metadata() {
    set +e
    cd ${S}
    export KMETA=${KMETA}

    # if kernel tools are available in-tree, they are preferred
    # and are placed on the path before any external tools. Unless
    # the external tools flag is set, in that case we do nothing.
    if [ -f "${S}/scripts/util/configme" ]; then
        if [ -z "${EXTERNAL_KERNEL_TOOLS}" ]; then
            PATH=${S}/scripts/util:${PATH}
        fi
    fi

    machine_branch="${@ get_machine_branch(d, "${KBRANCH}" )}"
    machine_srcrev="${SRCREV_machine}"
    if [ -z "${machine_srcrev}" ]; then
        # fallback to SRCREV if a non machine_meta tree is being built
        machine_srcrev="${SRCREV}"
    fi

    # In a similar manner to the kernel itself:
    #
    #   defconfig: $(obj)/conf
    #   ifeq ($(KBUILD_DEFCONFIG),)
    #   $< --defconfig $(Kconfig)
    #   else
    #   @echo "*** Default configuration is based on '$(KBUILD_DEFCONFIG)'"
    #   $(Q)$< --defconfig=arch/$(SRCARCH)/configs/$(KBUILD_DEFCONFIG) $(Kconfig)
    #   endif
    #
    # If a defconfig is specified via the KBUILD_DEFCONFIG variable, we copy it
    # from the source tree, into a common location and normalized "defconfig" name,
    # where the rest of the process will include and incoroporate it into the build
    #
    # If the fetcher has already placed a defconfig in WORKDIR (from the SRC_URI),
    # we don't overwrite it, but instead warn the user that SRC_URI defconfigs take
    # precendence.
    #
    if [ -n "${KBUILD_DEFCONFIG}" ]; then
        if [ -f "${S}/arch/${ARCH}/configs/${KBUILD_DEFCONFIG}" ]; then
            if [ -f "${WORKDIR}/defconfig" ]; then
                # If the two defconfig's are different, warn that we didn't overwrite the
                # one already placed in WORKDIR by the fetcher.
                cmp "${WORKDIR}/defconfig" "${S}/arch/${ARCH}/configs/${KBUILD_DEFCONFIG}"
                if [ $? -ne 0 ]; then
                    bbwarn "defconfig detected in WORKDIR. ${KBUILD_DEFCONFIG} skipped"
                fi
            else
                cp -f ${S}/arch/${ARCH}/configs/${KBUILD_DEFCONFIG} ${WORKDIR}/defconfig
                sccs="${WORKDIR}/defconfig"
            fi
        else
            bbfatal "A KBUILD_DECONFIG '${KBUILD_DEFCONFIG}' was specified, but not present in the source tree"
        fi
    fi

    sccs="$sccs ${@" ".join(find_sccs(d))}"
    patches="${@" ".join(find_patches(d))}"
    feat_dirs="${@" ".join(find_kernel_feature_dirs(d))}"

    # check for feature directories/repos/branches that were part of the
    # SRC_URI. If they were supplied, we convert them into include directives
    # for the update part of the process
    for f in ${feat_dirs}; do
        if [ -d "${WORKDIR}/$f/meta" ]; then
            includes="$includes -I${WORKDIR}/$f/kernel-meta"
            elif [ -d "${WORKDIR}/$f" ]; then
            includes="$includes -I${WORKDIR}/$f"
        fi
    done
    for s in ${sccs} ${patches}; do
        sdir=$(dirname $s)
        includes="$includes -I${sdir}"
                # if a SRC_URI passed patch or .scc has a subdir of "kernel-meta",
                # then we add it to the search path
                if [ -d "${sdir}/kernel-meta" ]; then
            includes="$includes -I${sdir}/kernel-meta"
                fi
    done

    # expand kernel features into their full path equivalents
    bsp_definition=$(spp ${includes} --find -DKMACHINE=${KMACHINE} -DKTYPE=${LINUX_KERNEL_TYPE})
    meta_dir=$(kgit --meta)

    # run1: pull all the configuration fragments, no matter where they come from
    elements="`echo -n ${bsp_definition} ${sccs} ${patches} ${KERNEL_FEATURES}`"
    if [ -n "${elements}" ]; then
        scc --force -o ${S}/${meta_dir}:cfg,meta ${includes} ${bsp_definition} ${sccs} ${patches} ${KERNEL_FEATURES}
        if [ $? -ne 0 ]; then
            bbfatal_log "Could not generate configuration queue for ${KMACHINE}."
        fi
    fi

    # run2: only generate patches for elements that have been passed on the SRC_URI
    elements="`echo -n ${sccs} ${patches} ${KERNEL_FEATURES}`"
    if [ -n "${elements}" ]; then
        scc --force -o ${S}/${meta_dir}:patch --cmds patch ${includes} ${sccs} ${patches} ${KERNEL_FEATURES}
        if [ $? -ne 0 ]; then
            bbfatal_log "Could not generate configuration queue for ${KMACHINE}."
        fi
    fi
}

do_patch() {
    cd ${S}

    check_git_config
    meta_dir=$(kgit --meta)
    (cd ${meta_dir}; ln -sf patch.queue series)
    if [ -f "${meta_dir}/series" ]; then
        kgit-s2q --gen -v --patches .kernel-meta/
        if [ $? -ne 0 ]; then
            bberror "Could not apply patches for ${KMACHINE}."
            bbfatal_log "Patch failures can be resolved in the linux source directory ${S})"
        fi
    fi
}

do_kernel_checkout() {
    set +e

    source_dir=`echo ${S} | sed 's%/$%%'`
    source_workdir="${WORKDIR}/git"
    if [ -d "${WORKDIR}/git/" ]; then
        # case: git repository
        # if S is WORKDIR/git, then we shouldn't be moving or deleting the tree.
        if [ "${source_dir}" != "${source_workdir}" ]; then
            if [ -d "${source_workdir}/.git" ]; then
                # regular git repository with .git
                rm -rf ${S}
                mv ${WORKDIR}/git ${S}
            else
                # create source for bare cloned git repository
                git clone ${WORKDIR}/git ${S}
                rm -rf ${WORKDIR}/git
            fi
        fi
        cd ${S}
    else
        # case: we have no git repository at all. 
        # To support low bandwidth options for building the kernel, we'll just 
        # convert the tree to a git repo and let the rest of the process work unchanged
        
        # if ${S} hasn't been set to the proper subdirectory a default of "linux" is 
        # used, but we can't initialize that empty directory. So check it and throw a
        # clear error

            cd ${S}
        if [ ! -f "Makefile" ]; then
            bberror "S is not set to the linux source directory. Check "
            bbfatal "the recipe and set S to the proper extracted subdirectory"
        fi
        rm -f .gitignore
        git init
        git add .
        git commit -q -m "baseline commit: creating repo for ${PN}-${PV}"
        git clean -d -f
    fi

    # convert any remote branches to local tracking ones
    for i in `git branch -a --no-color | grep remotes | grep -v HEAD`; do
        b=`echo $i | cut -d' ' -f2 | sed 's%remotes/origin/%%'`;
        git show-ref --quiet --verify -- "refs/heads/$b"
        if [ $? -ne 0 ]; then
            git branch $b $i > /dev/null
        fi
    done

    # Create a working tree copy of the kernel by checking out a branch
    machine_branch="${@ get_machine_branch(d, "${KBRANCH}" )}"

    # checkout and clobber any unimportant files
    git checkout -f ${machine_branch}
}
do_kernel_checkout[dirs] = "${S}"

addtask kernel_checkout before do_kernel_metadata after do_unpack
addtask kernel_metadata after do_validate_branches do_unpack before do_patch
do_kernel_metadata[depends] = "kern-tools-native:do_populate_sysroot"

do_kernel_configme[dirs] += "${S} ${B}"
do_kernel_configme() {
    set +e

    # translate the kconfig_mode into something that merge_config.sh
    # understands
    case ${KCONFIG_MODE} in
        *allnoconfig)
            config_flags="-n"
            ;;
        *alldefconfig)
            config_flags=""
            ;;
        *)
        if [ -f ${WORKDIR}/defconfig ]; then
            config_flags="-n"
        fi
        ;;
    esac

    cd ${S}

    meta_dir=$(kgit --meta)
    configs="$(scc --configs -o ${meta_dir})"
    if [ -z "${configs}" ]; then
        bbfatal_log "Could not find configuration queue (${meta_dir}/config.queue)"
    fi

    CFLAGS="${CFLAGS} ${TOOLCHAIN_OPTIONS}" ARCH=${ARCH} merge_config.sh -O ${B} ${config_flags} ${configs} > ${meta_dir}/cfg/merge_config_build.log 2>&1
    if [ $? -ne 0 ]; then
        bbfatal_log "Could not configure ${KMACHINE}-${LINUX_KERNEL_TYPE}"
    fi

    echo "# Global settings from linux recipe" >> ${B}/.config
    echo "CONFIG_LOCALVERSION="\"${LINUX_VERSION_EXTENSION}\" >> ${B}/.config
}

addtask kernel_configme before do_configure after do_patch

python do_kernel_configcheck() {
    import re, string, sys

    # if KMETA isn't set globally by a recipe using this routine, we need to
    # set the default to 'meta'. Otherwise, kconf_check is not passed a valid
    # meta-series for processing
    kmeta = d.getVar( "KMETA", True ) or "meta"
    if not os.path.exists(kmeta):
        kmeta = "." + kmeta

    pathprefix = "export PATH=%s:%s; " % (d.getVar('PATH', True), "${S}/scripts/util/")

    cmd = d.expand("scc --configs -o ${S}/.kernel-meta")
    ret, configs = oe.utils.getstatusoutput("%s%s" % (pathprefix, cmd))

    cmd = d.expand("cd ${S}; kconf_check --report -o ${S}/%s/cfg/ ${B}/.config ${S} %s" % (kmeta,configs))
    ret, result = oe.utils.getstatusoutput("%s%s" % (pathprefix, cmd))

    config_check_visibility = int(d.getVar( "KCONF_AUDIT_LEVEL", True ) or 0)
    bsp_check_visibility = int(d.getVar( "KCONF_BSP_AUDIT_LEVEL", True ) or 0)

    # if config check visibility is non-zero, report dropped configuration values
    mismatch_file = d.expand("${S}/%s/cfg/mismatch.txt" % kmeta)
    if os.path.exists(mismatch_file):
        if config_check_visibility:
            with open (mismatch_file, "r") as myfile:
                results = myfile.read()
                bb.warn( "[kernel config]: specified values did not make it into the kernel's final configuration:\n\n%s" % results)
}

OE_TERMINAL_EXPORTS += "KBUILD_OUTPUT"
KBUILD_OUTPUT = "${B}"

python () {
    # If diffconfig is available, ensure it runs after kernel_configme
    if 'do_diffconfig' in d:
        bb.build.addtask('do_diffconfig', None, 'do_kernel_configme', d)
}


pkg_postinst_${PN} () {
    sed -e '/^hosts:/s/\s*\<myhostname\>//' \
        -e 's/\(^hosts:.*\)\(\<files\>\)\(.*\)\(\<dns\>\)\(.*\)/\1\2 myhostname \3\4\5/' \
        -i $D${sysconfdir}/nsswitch.conf
}

pkg_prerm_${PN} () {
    sed -e '/^hosts:/s/\s*\<myhostname\>//' \
        -e '/^hosts:/s/\s*myhostname//' \
        -i $D${sysconfdir}/nsswitch.conf
}

pkg_postinst_udev-hwdb () {
    if test -n "$D"; then
        ${@qemu_run_binary(d, '$D', '${base_bindir}/udevadm')} hwdb --update \
            --root $D
        chown root:root $D${sysconfdir}/udev/hwdb.bin
    else
        udevadm hwdb --update
    fi
}

pkg_prerm_udev-hwdb () {
    rm -f $D${sysconfdir}/udev/hwdb.bin
}